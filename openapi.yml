openapi: 3.0.3
info:    
  title: Puppy Playdate Finder API
  version: v1 
paths: 
  /users:
    x-controller: users
    post:
      x-operation: createUser
      tags:
        - Users
      summary: create a user's account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object  
              required: 
                - username
                - password
                - email
              properties: 
                parentName: 
                  type: string
                parentBirthday: 
                  type: string
                petBirthday: 
                  type: string
                petName: 
                  type: string
                bio:
                  type: string
                username: 
                  type: string
                password:
                  type: string
                  format: password
                email: 
                  type: string
                tags: 
                  type: array
                  items:
                    type: string
                city:
                  type: string
                state: 
                  type: string
            example:
              parentName: Sarah Miller
              parentBirthday: "1995-01-01"
              petBirthday: "2020-06-01"
              petName: Luna
              bio: a cute dog looking for fun friends 
              username: sarahm098
              password: password123
              email: sarahm@gmail.com  
              tags:
                - cute
                - collie
                - energetic
              city: Los Angeles
              state: California
      responses:
        201:
          description: User created.
        400:
          description: Invalid request.
        409:
          description: User already exists. 
  /users/{userId}:
    x-controller: users
    parameters:
      - $ref: '#/components/parameters/PathId'
    patch:
      x-operation: updateUser
      tags:
        - Users
      security:
        - cookieAuth: []
      summary: update a user's account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties: 
                parentName: 
                  type: string
                petName: 
                  type: string
                bio:
                  type: string 
                email: 
                  type: string
                city:
                  type: string
                state: 
                  type: string
      responses:
        200:
          description: Successfully updated.
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    delete:
      x-operation: deleteUser
      tags:
        - Users
      summary: delete a user's account
      responses:
        204:
          description: User deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
    get:
      x-operation: getUser
      tags:
        - Users
      #security: 
        #- cookieAuth: []
      summary: get a users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /users/{userId}/pics:
    x-controller: users
    parameters:
      - $ref: '#/components/parameters/PathId'
    post:
      x-operation: uploadPicture
      tags:
        - Users
      security:
        - cookieAuth: []
      summary: upload a picture
      requestBody:
        $ref: '#/components/requestBodies/UploadPicture'
      responses:
        201:
          description: Picture uploaded successfully.
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
        404:
          description: Profile not found.
  /users/{userId}/pics/{pic_id}:
    x-controller: users
    parameters:
      - $ref: '#/components/parameters/PathId'
      - $ref: '#/components/parameters/PathPicId'
    delete:
      x-operation: deletePicture
      tags:
        - Users
      security:
        - cookieAuth: []
      summary: delete a picture
      responses:
        204:
          description: Picture deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /users/getNearby:
    x-controller: users
    post:
      x-operation: getNearbyUsers
      tags:
        - Users
      #security: 
        #- cookieAuth: []
      summary: get all nearby users
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location: 
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /liked/likeUser:
    x-controller: liked
    post:
      x-operation: likeUser
      tags:
        - Liked
      #security: 
        #- cookieAuth: []
      summary: allow a user to like another
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: 
                  type: string
                liked_user_id: 
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  matched: 
                    type: boolean
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /liked/dislikeUser:
    x-controller: liked
    post:
      x-operation: dislikeUser
      tags:
        - Liked
      #security: 
        #- cookieAuth: []
      summary: allow a user to dislike another
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: 
                  type: string
                disliked_user_id: 
                  type: string
      responses:
        200:
          description: Success
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /authentication/login:
    x-controller: authentication
    post:
      x-operation: login
      tags:
        - Authentication
      summary: login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username: 
                  type: string
                password:
                  type: string
                  format: password
            example:
              username: doglover1234
              password: agreatpassword
      responses:
        200:
          description: Authenticated.
          #content:
            #application/json:
              #schema: 
                  #$ref: '#/components/schemas/User'
        400:
          description: Invalid request.
        403:
          description: Access denied.
  /authentication/logout:
    x-controller: authentication
    put:
      x-operation: logout
      tags:
        - Authentication
      summary: log a user out
      responses:
        200:
          description: Logged out.
        403:
          description: Access denied.
  /chats:
    x-controller: chats
    post:
      x-operation: createChat
      tags:
        - Chats
      security:
        - cookieAuth: []
      summary: create a chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /chats/getUserChats:
    x-controller: chats
    post:
      x-operation: getUserChats
      tags:
        - Chats
      #security:
        #- cookieAuth: []
      summary: get a users chats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: 
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                nullable: true
                items:
                  type: object
                  properties: 
                    chat_id: 
                      type: string
                    user_id1: 
                      type: string
                    user_id2: 
                      type: string
                    user1_messages: 
                      type: array
                      nullable: true
                      items:
                        type: object
                        properties:
                          message: 
                            type: string
                    user2_messages: 
                      type: array
                      nullable: true
                      items:
                        type: object
                        properties:
                          message: 
                            type: string
                    user1_name: 
                      type: string
                    user2_name: 
                      type: string
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /chats/{chat_id}:
    x-controller: chats
    parameters:
      - $ref: '#/components/parameters/PathChatId'
    get:
      x-operation: getChat
      tags:
        - Chats
      #security:
        #- cookieAuth: []
      summary: get a specific chat
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties: 
                  chat_id: 
                    type: string
                  user_id1: 
                    type: string
                  user_id2: 
                    type: string
                  user1_messages: 
                    type: array
                    nullable: true
                    items:
                      type: object
                      properties:
                        message: 
                          type: string
                  user2_messages: 
                    type: array
                    nullable: true
                    items:
                      type: object
                      properties:
                        message: 
                          type: string
                  user1_name: 
                    type: string
                  user2_name: 
                    type: string
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    put:
      x-operation: updateChat
      tags:
        - Chats
      security:
        - cookieAuth: []
      summary: update a chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties: 
                user1_messages: 
                  type: array
                  nullable: true
                  items: 
                    type: string
                user2_messages: 
                  type: array
                  nullable: true
                  items: 
                      type: string
      responses:
        200:
          description: Success.
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    delete:
      x-operation: deleteChat
      tags:
        - Chats
      security:
        - cookieAuth: []
      summary: delete a chat
      responses:
        204:
          description: Chat deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /chats/{chat_id}/send:
    x-controller: chats
    parameters:
      - $ref: '#/components/parameters/PathChatId'
    put:
      x-operation: sendMessage
      tags:
        - Chats
      #security:
        #- cookieAuth: []
      summary: send a message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object 
              properties: 
                user1_messages: 
                  type: array
                  nullable: true
                  items: 
                    type: object
                    properties: 
                      message: 
                        type: string
                user2_messages: 
                  type: array
                  nullable: true
                  items: 
                    type: object
                    properties: 
                      message: 
                        type: string
      responses:
        200:
          description: Success.
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
components: 
  parameters: 
    PathId: 
      name: userId
      in: path
      required: true
      schema:
        type: string
    PathChatId: 
      name: chat_id
      in: path
      required: true
      schema:
        type: string
    PathPicId:
      name: pic_id
      in: path
      required: true
      schema:
        type: string
  requestBodies: 
    SetChat:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chat'
    SendMessage:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              messages:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              user_id:
                type: string
              num: 
                type: integer
    UploadPicture:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pic'
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: todoSessionId 
  schemas:
    Pic:
      type: object 
      properties: 
        data:
          type: string
          format: binary
        size:
          type: number
        name:
          type: string
    User:
      type: object 
      properties: 
        userId:
          type: string
          readOnly: true
        parentName: 
          type: string
          nullable: true
        parentBirthday: 
          type: string
          nullable: true
        petBirthday: 
          type: string
          nullable: true
        petName: 
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        username: 
          type: string
        password:
          type: string
          format: password
          nullable: true
        email: 
          type: string
          nullable: true
        tags: 
          type: array
          items:
            type: string
          nullable: true
        city:
          type: string
          nullable: true
        state: 
          type: string
          nullable: true
    Message:
      type: object 
      properties: 
        messageId: 
          type: string
          nullable: true
          readOnly: true
        message: 
          type: string
        receivingUser:
          type: string
        sendingUser:
          type: string
    Chat:
      type: object
      properties:
        chatId:
          type: string
          readOnly: true
        user_id1:
          type: string
          readOnly: true
        user_id2:
          type: string
          readOnly: true
        user1_name:
          type: string
          readOnly: true
        user2_name:
          type: string
          readOnly: true
        user1_messages: 
          type: string
          nullable: true
        user2_messages: 
          type: string
          nullable: true
